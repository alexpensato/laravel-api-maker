<?php namespace {{transformer.namespace}};

use Pensato\Api\Support\BaseTransformer;
use {{model.fullName}};

class {{transformer.name}} extends BaseTransformer
{
    /**
     * Turn this item object into a generic array.
     *
     * @param $item
     * @return array
     */
    public function transform({{model.name}} $item)
    {
        $fields = [
            'id' => (int)$item->id,
            'created_at' => (string)$item->created_at,
            'updated_at' => (string)$item->updated_at,
        ];

        // Volatile fields are passed by collection methods of the repository
        if (! empty($volatileFields)) {
            foreach ($this->volatileFields as $field) {
                switch ($field) {
                    case "friendlyName":
                        $fields['friendlyName'] = (string)$item->name;
                        break;
                }
            }
        }

        return $fields;
    }

    /**
     * Maps data from request to Model object.
     *
     * @param array $data
     * @param {{model.name}} $model
     *
     * @return array
     */
    public function mapper($data, $model)
    {
        $newData = [];
        foreach ($data as $key => $value) {
            switch ($key) {
                // Example of mapping name to firstName
                case "name":
                    $newData['firstName'] = $value;
                    break;
            }
        }
        return $newData;
    }

}
